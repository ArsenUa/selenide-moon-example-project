plugins {
    id "io.qameta.allure" version "2.5"
}

ext {
    selenideVersion = "5.0.0"
    allureVersion = "2.7.0"
}

allure {
    version = "$allureVersion"
    autoconfigure = true
    configuration = 'compile'
    aspectjweaver = true
    aspectjVersion = '1.8.10'
    resultsDir = file("${rootDir}/ui-tests/build/allure-results")
    reportDir = file("${rootDir}/ui-tests/build/reports/allure-report")
    useJUnit5 {
        version = "${allureVersion}"
    }
    downloadLink = "https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/$allureVersion/allure-${allureVersion}.zip"
}



dependencies {
    compile (
            project(":api-tests"),
            ["com.codeborne:selenide:${selenideVersion}"],
            ["io.qameta.allure:allure-selenide:$allureVersion"]
    )
}


import io.qameta.allure.gradle.task.AllureReport
task allureAggregatedReport(type: AllureReport) {
    allure.resultsDir
}


test {
    useJUnitPlatform{
        includeTags 'login', 'registration'
        excludeTags 'test'
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }
    filter {
        includeTestsMatching "com.example.ui_tests.LoginTests"
        includeTestsMatching "com.example.ui_tests.RegistrationTests"
    }

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    systemProperties = [
            'file.encoding'   : 'UTF-8',
            'selenide.browser': 'chrome',
            'BUILD_URL'       : System.getenv()['BUILD_URL'],
    ]
}.finalizedBy allureAggregatedReport



/*
test {
    useJUnitPlatform()
    filter {
        //specific test method
        includeTestsMatching "org.gradle.SomeTest.someSpecificFeature"

        //specific test method, use wildcard for packages
        includeTestsMatching "*SomeTest.someSpecificFeature"

        //specific test class
        includeTestsMatching "org.gradle.SomeTest"

        //specific test class, wildcard for packages
        includeTestsMatching "*.SomeTest"

        //all classes in package, recursively
        includeTestsMatching "com.gradle.tooling.*"

        //all integration tests, by naming convention
        includeTestsMatching "*IntegTest"

        //only ui tests from integration tests, by some naming convention
        includeTestsMatching "*IntegTest*ui"

        includeClassNamePatterns '.*Should'
    }
}
task testWithDockerChrome(type: Test) {
    filter {
        includeTestsMatching 'ShouldSeleniumContainerTest'
    }
    ignoreFailures = true
    testLogging.exceptionFormat = 'full'
    testLogging {
        events "passed", "skipped", "failed"
    }
//    systemProperties System.properties
    systemProperties = [
            'file.encoding'   : 'UTF-8',
            'selenide.browser': 'chrome',
            'BUILD_URL'       : System.getenv()['BUILD_URL'],
    ]
}*/
